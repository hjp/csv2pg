#!/usr/bin/python3

import argparse
import csv
import psycopg2
import psycopg2.extensions
import re

ap = argparse.ArgumentParser(description="Import a CSV file into a PostgreSQL table")
ap.add_argument("--dbname")
ap.add_argument("--dbport")
ap.add_argument("--dbuser")
ap.add_argument("--schema")
ap.add_argument("--delimiter", default=",")
ap.add_argument("--tsv", action="store_const", const="\t", dest="delimiter")
ap.add_argument("--null", default="\\N")
ap.add_argument("--tablename")
ap.add_argument("--drop", action='store_true')
ap.add_argument("--encoding")
ap.add_argument("--quote-columns", action='store_true')
ap.add_argument("--types", nargs="*")
ap.add_argument("filename")

a = ap.parse_args()

connectstring = ""
if a.dbname:
    connectstring += " dbname=%s" % a.dbname
if a.dbuser:
    connectstring += " user=%s" % a.dbuser
if a.dbport:
    connectstring += " port=%s" % a.dbport
db = psycopg2.connect(connectstring)

if a.schema:
    csr = db.cursor()
    csr.execute(f"set search_path to {a.schema}")

if a.tablename:
    tablename = a.tablename
else:
    tablename = a.filename.rpartition("/")[2].partition(".")[0]
    tablename = tablename.lower()
    tablename = re.sub(r'[^a-z0-9_]+', '_', tablename)
    if re.match('[0-9]', tablename):
        tablename = "t_" + tablename

with open(a.filename, newline='', encoding=a.encoding) as f:
    csvrd = csv.reader(f, delimiter=a.delimiter)
    header = next(csvrd)
    lines = []
    for line in csvrd:
        lines.append(line)
        while len(line) > len(header):
            header.append("")
    for i in range(len(header)):
        if header[i] == "":
            header[i] = "_col_%d" % (i + 1)

available_types = ["int", "float8", "text"]
types = [set(available_types) for _ in header]
if a.types:
    coltypes = {}
    for t in a.types:
        col, typ = t.split("=")
        coltypes[col] = typ
        if typ not in available_types:
            available_types.append(typ)
    for i, col in enumerate(header):
        if col in coltypes:
            types[i] = {coltypes[col]}

nullable = [False for _ in  header]

for i in range(len(header)):
    for line in lines:
        while len(line) < len(header):
            line.append(None)
        v = line[i]
        if v == a.null:
            line[i] = None
            v = None
        if v is None:
            nullable[i] = True
        else:
            if "int" in types[i]:
                try:
                    vv = int(v)
                    if vv > 0x7FFFFFFF:
                        types[i] -= {"int"}
                except:
                     types[i] -= {"int"}
            if "float8" in types[i]:
                try:
                    vv = float(v)
                except:
                    types[i] -= {"float8"}

columns = []

for i in range(len(header)):
    header[i] = header[i].replace(" ", "_")

for i in range(len(header)):

    if a.quote_columns:
        cdef = psycopg2.extensions.quote_ident(header[i], db)
    else:
        cdef = header[i]

    for t in available_types:
        if t in types[i]:
            cdef += " " + t
            break

    if not nullable[i]:
        cdef += " not null"

    columns.append(cdef)

csr = db.cursor()
if a.drop:
    drop_q = "drop table if exists " + tablename
    print(drop_q)
    csr.execute(drop_q)
create_q = "create table " + tablename + " (" + ", ".join(columns) + ")"
print(create_q)
csr.execute(create_q)

if a.quote_columns:
    column_list = [psycopg2.extensions.quote_ident(h, db) for h in header]
else:
    column_list = header

insert_q = "insert into " + tablename + " (" + ", ".join(column_list) + ") values (" + ", ".join(["%s" for _ in header]) + ")"
for line in lines:
    csr.execute(insert_q, line)

db.commit()
